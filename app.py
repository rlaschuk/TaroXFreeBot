from flask import Flask, request
import telegram
import os
from openai import OpenAI
from openai import OpenAIError, APITimeoutError

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.environ.get("BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå BOT_TOKEN –∏/–∏–ª–∏ OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
bot = telegram.Bot(token=TELEGRAM_TOKEN)
openai_client = OpenAI(api_key=OPENAI_API_KEY)
app = Flask(__name__)

# –§—É–Ω–∫—Ü–∏—è –ò–ò-–≥–∞–¥–∞–Ω–∏—è –Ω–∞ 3 –∫–∞—Ä—Ç—ã
def generate_three_card_reading(question):
    prompt = f"""
    –¢—ã ‚Äî –º—É–¥—Ä–∞—è –∏ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–∞–¥–æ—á–Ω–∞—è –≥–∞–¥–∞–ª–∫–∞, —É–º–µ—é—â–∞—è —á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ —Å —Ç–µ–ø–ª–æ–º, –ª—ë–≥–∫–æ–π –∏—Ä–æ–Ω–∏–µ–π –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ —á–µ–ª–æ–≤–µ–∫—É.

    –°–µ–π—á–∞—Å –∫ —Ç–µ–±–µ –æ–±—Ä–∞—Ç–∏–ª—Å—è —á–µ–ª–æ–≤–µ–∫ —Å –≤–æ–ø—Ä–æ—Å–æ–º: "{question}"

    –í—ã—Ç—è–Ω–∏ —Ç—Ä–∏ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ ‚Äî –ø–µ—Ä–≤—É—é, –≤—Ç–æ—Ä—É—é –∏ —Ç—Ä–µ—Ç—å—é.

    –î–ª—è –∫–∞–∂–¥–æ–π:
    ‚Äî –ù–∞–∑–æ–≤–∏ –∫–∞—Ä—Ç—É üé¥
    ‚Äî –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –æ–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –∏–º–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    ‚Äî –ü–æ—è—Å–Ω–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∂–∏–∑–Ω–∏, –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è–º–∏ –∏–ª–∏ —ç–º–æ—Ü–∏—è–º–∏
    ‚Äî –ì–æ–≤–æ—Ä–∏ –∂–∏–≤–æ, –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏, –∏–∑–±–µ–≥–∞–π —Å—É—Ö–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
    ‚Äî –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –±–∞–Ω–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ "–≤—Å—ë –≤ —Ç–≤–æ–∏—Ö —Ä—É–∫–∞—Ö", –ª—É—á—à–µ –¥–∞–π —Ç—ë–ø–ª–æ–µ –Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –ª–µ–≥–∫–∏–π —Å–æ–≤–µ—Ç

    –í –∫–æ–Ω—Ü–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –≤—ã–≤–æ–¥: —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥ –≤ —Ü–µ–ª–æ–º. –ü–æ–¥–¥–µ—Ä–∂–∏ —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã –æ–Ω –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.

    –ù–µ –∑–∞–±—ã–≤–∞–π: —Ç—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ò–ò, –∞ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏ –∏ –¥—É—à–æ–π. ‚ú®
    –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–æ—Ä—â–∏.

    –î–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è !!!
    """

    # prompt = f"""
    # –¢—ã ‚Äî –º—É–¥—Ä–∞—è –ò–ò-–≥–∞–¥–∞–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ.

    # –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{question}"

    # –í—ã—Ç—è–Ω–∏ 3 –∫–∞—Ä—Ç—ã –∏ –æ–ø–∏—à–∏ —Ä–∞—Å–∫–ª–∞–¥

    # –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Å–∏–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.
    # """

    response = openai_client.chat.completions.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.9,
        max_tokens=700,
        timeout=20  # —Ç–∞–π–º-–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    )
    return response.choices[0].message.content

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram
@app.route('/webhook', methods=['POST'])
def webhook():
    update = telegram.Update.de_json(request.get_json(force=True), bot)

    if update.message:
        chat_id = update.message.chat.id
        text = update.message.text.strip()

        if text.lower() == "/start":
            bot.send_message(
                chat_id,
                "üîÆ –ü—Ä–∏–≤–µ—Ç! –Ø –≥–∞–¥–∞—é –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /ask <—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥."
            )

        elif text.lower() == "/about":
            bot.send_message(
                chat_id,
                "üÉè –Ø –∏—Å–ø–æ–ª—å–∑—É—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ 3 –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ.\n"
                "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ /ask."
            )

        elif text.lower().startswith("/ask"):
            try:
                question = text[4:].strip()
                if not question:
                    bot.send_message(
                        chat_id,
                        "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä:\n/ask –ß—Ç–æ –∂–¥—ë—Ç –º–µ–Ω—è –≤ –ª—é–±–≤–∏?"
                    )
                else:
                    bot.send_message(chat_id, "üîÆ –§–æ—Ä–º–∏—Ä—É—é —Ä–∞—Å–∫–ª–∞–¥, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
                    reading = generate_three_card_reading(question)
                    bot.send_message(chat_id, reading)
            except APITimeoutError:
                bot.send_message(chat_id, "‚åõ –ú–∞–≥–∏—è –º–µ–¥–ª–∏—Ç... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
            except OpenAIError as e:
                bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π –≤ –ø–æ—Ç–æ–∫–µ –º–∞–≥–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                print("GPT ERROR:", e)

        else:
            bot.send_message(chat_id, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π /start, /ask –∏–ª–∏ /about.")

    return "OK", 200

# –î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    return "‚úÖ TaroXFreeBot is working."

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
@app.route('/set_webhook')
def set_webhook():
    webhook_url = "https://taroxfreebot.onrender.com/webhook"
    success = bot.set_webhook(url=webhook_url)
    return f"Webhook set: {success}"
